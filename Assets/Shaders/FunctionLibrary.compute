#pragma kernel FunctionKernel

RWStructuredBuffer<float3> _Positions;
float _Step, _Time;
uint _Resolution;

/*
 * float step = 2f / resolution;
 * float u = (x + 0.5f) * step - 1f;
 * float v = (z + 0.5f) * step - 1f;
 * points[i].localPosition = f(u, v, time);
 */


float2 GetUV(uint3 id)
{
    return (id.xy + 0.5) * _Step - 1;
}

void SetPosition(uint3 id, float3 position)
{
    if (id.x < _Resolution && id.y < _Resolution)
    {
        _Positions[id.x + id.y * _Resolution] = position;
    }
}

#define PI 3.14159265358979323846

float3 Wave(float u, float v, float t)
{
    float3 p;
        
    p.x = u;
    p.y = sin(PI * (u + v + t));
    p.z = v;

    return p;
}

[numthreads(8,8,1)]
void FunctionKernel (uint3 id : SV_DispatchThreadID)
{
    float2 uv = GetUV(id);
    SetPosition(id, Wave(uv.x, uv.y, _Time));
}
